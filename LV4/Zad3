import numpy as np
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import PolynomialFeatures

def non_func(x):
    y = 1.6345 - 0.6235*np.cos(0.6067*x) - 1.3501*np.sin(0.6067*x) - 1.1622 * np.cos(2*x*0.6067) - 0.9443*np.sin(2*x*0.6067)
    return y

def add_noise(y):
    np.random.seed(14)
    varNoise = np.max(y) - np.min(y)
    y_noisy = y + 0.1*varNoise*np.random.normal(0,1,len(y))
    return y_noisy

degrees = [2, 6, 15]
num_samples = 50

x = np.linspace(1,10,num_samples)
y_true = non_func(x)
y_measured = add_noise(y_true)

x = x[:, np.newaxis]
y_measured = y_measured[:, np.newaxis]

np.random.seed(12)
indeksi = np.random.permutation(len(x))
train_size = int(np.floor(0.7*len(x)))
indeksi_train = indeksi[:train_size]
indeksi_test = indeksi[train_size:]

xtrain_orig = x[indeksi_train]
ytrain = y_measured[indeksi_train]
xtest_orig = x[indeksi_test]
ytest = y_measured[indeksi_test]

MSEtrain = []
MSEtest = []

plt.figure(figsize=(10,6))
plt.plot(x, y_true, 'k-', label='Pozadinska funkcija')

for d in degrees:
    poly = PolynomialFeatures(degree=d)
    xtrain = poly.fit_transform(xtrain_orig)
    xtest = poly.transform(xtest_orig)
    xfull = poly.transform(x)
    
    model = lm.LinearRegression()
    model.fit(xtrain, ytrain)
    
    ytrain_pred = model.predict(xtrain)
    ytest_pred = model.predict(xtest)
    yfull_pred = model.predict(xfull)
    
    mse_train = mean_squared_error(ytrain, ytrain_pred)
    mse_test = mean_squared_error(ytest, ytest_pred)
    MSEtrain.append(mse_train)
    MSEtest.append(mse_test)
    
    plt.plot(x, yfull_pred, label=f'degree={d}')
    
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Usporedba modela polinomskih stupnjeva s pozadinskom funkcijom')
plt.show()

print("MSE za trening:", MSEtrain)
print("MSE za testiranje:", MSEtest)
